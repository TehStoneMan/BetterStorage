// For those who want the bleeding edge
buildscript
{
    repositories
    {
        jcenter()
        maven
        {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies
    {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

// Define properties file
ext.configFile = file "gradle.properties"

configFile.withReader
{
    // Load  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${minecraft_version}-${mod_major_version}.${api_major_version}.${minor_version}.${patch_version}"
group = "io.github.thestoneman.betterstorage"
archivesBaseName = "BetterStorageToo"

// java version
sourceCompatibility = targetCompatibility = '1.8'
compileJava
{
	sourceCompatibility = targetCompatibility = '1.8'
}

minecraft
{
    version = "${minecraft_version}-${forge_version}"
    //mc_version = "${minecraft_version}"

	if( file('../run').exists() )
	{
		runDir = "../run/assets"
	}
	else
	{
		runDir = "assets"
	}

    mappings = mappings_version

    replaceIn "src/main/java/io/github/tehstoneman/betterstorage/ModInfo.java"
    replace "@minecraft_version@", minecraft_version
    replace "@mod_major_version@", mod_major_version
    replace "@api_major_version@", api_major_version
    replace "@minor_version@", minor_version
    replace "@patch_version@", patch_version
    replace "@forge_version@", forge_version
}

repositories
{
	maven
	{
    	// location of the maven that hosts JEI files
    	name = "Progwml6 maven"
    	url = "http://dvs1.progwml6.com/files/maven"
  	}
  	maven
  	{
    	// location of a maven mirror for JEI files, as a fallback
    	name = "ModMaven"
    	url = "modmaven.k-4u.nl"
  	}
  	// ivy
    // {
    //     name "MineTweaker3"
    //     artifactPattern "http://minetweaker3.powerofbytes.com/download/[module]-([classifier]-)[revision].[ext]"
    // }
    // maven
    // {
    //     name "RX14"
    //     url "http://mvn.rx14.co.uk/repo/"
    // }
    // ivy
    // {
    //     name "Thaumcraft"
    //     //artifactPattern "https://dl.dropboxusercontent.com/u/47135879/[module]-([classifier]-)[revision].[ext]"
    //     // https://dl.dropboxusercontent.com/u/47135879/Baubles-1.11-1.4.3-api.zip
    //     url "https://dl.dropboxusercontent.com/u/47135879"
    //     layout "pattern",
    //     {
    //     	artifact "[module]-[revision].[ext]"
    //     }
    // }
	// ivy
	// {
    //     name "Botania"
    //     artifactPattern "http://botaniamod.net/files/deobf/[module] [revision]-[classifier].[ext]"
    // }
}

dependencies
{
    //compile name: "Armourers-Workshop", group: "riskyken.armourersWorkshop", version: aw_version, classifier: "api"
    //compile name: "Thaumcraft"        , version: tc_version, classifier: "deobf"

    //runtime "com.azanor.baubles:Baubles:${baubles_version}-deobf"

    //compile name: "Botania"           , group: "vazkii.botania", version: botania_version, classifier: "deobf"
    //compile name: "InventoryTweaks"   , group: "inventorytweaks", version: invtweaks_version, classifier: "deobf"
    //compile name: "MineTweaker3"      , group: "minetweaker", version: minetweaker_version, classifier: "Dev"

	// compile against the JEI API but do not include it at runtime
	deobfProvided "mezz.jei:jei_${minecraft_version}:${jei_version}:api"
	// at runtime, use the full JEI jar
	runtime "mezz.jei:jei_${minecraft_version}:${jei_version}"
}

sourceSets
{
    main
    {
        java
        {
        	srcDirs 'src/main/java'
        }
        resources
        {
        	srcDirs 'src/main/resources'
        }
    }
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs)
    {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mc_version':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs)
    {
        exclude 'mcmod.info'
    }
}

//task apiJar(type: Jar, dependsOn: classes)
//{
//    from sourceSets.main.output
//    include 'io/gethub/tehstoneman/betterstorage/api/**'
//    classifier = 'api'
//}

//task sourcesJar(type: Jar, dependsOn: classes)
//{
//    from sourceSets.main.allSource
//    classifier = 'sources'
//}

//task deobfJar(type: Jar)
//{
//    from sourceSets.main.output
//    classifier = 'deobf'
//}

//artifacts
//{
//    archives sourcesJar
//    archives apiJar
//    archives deobfJar
//}